passwd:
  users:
    - name: core
      ssh_authorized_keys:
        - "$SSH_KEY"
storage:
  files:
    - path: "/etc/traefik/acme/acme.json"
      filesystem: root
      contents:
        inline: |
      mode: 0600
    - path: /etc/environment
      filesystem: root
      contents:
        inline: |
          COREOS_PUBLIC_IPV4=${PUBLIC_IP}
          COREOS_PRIVATE_IPV4=${PRIVATE_IP}
      mode: 0644
    - path: /home/core/bootstrap.sh
      filesystem: root
      contents:
        inline: |
          #!/usr/bin/env bash
          set -euo pipefail

          CLUSTER_DIR=${CLUSTER_DIR:-cluster}
          SELF_HOST_ETCD=${SELF_HOST_ETCD:-true}
          CALICO_NETWORK_POLICY=${CALICO_NETWORK_POLICY:-false}
          CLOUD_PROVIDER=${CLOUD_PROVIDER:-}

          function usage() {
              echo "USAGE:"
              echo "$0: <remote-host>"
              exit 1
          }

          function configure_etcd() {
              [ -f "/etc/systemd/system/etcd-member.service.d/10-etcd-member.conf" ] || {
                  mkdir -p /etc/etcd/tls
                  cp /home/core/assets/tls/etcd-* /etc/etcd/tls
                  mkdir -p /etc/etcd/tls/etcd
                  cp /home/core/assets/tls/etcd/* /etc/etcd/tls/etcd
                  chown -R etcd:etcd /etc/etcd
                  chmod -R u=rX,g=,o= /etc/etcd
                  mkdir -p /etc/systemd/system/etcd-member.service.d
                  cat << EOF > /etc/systemd/system/etcd-member.service.d/10-etcd-member.conf
          [Service]
          Environment="ETCD_IMAGE_TAG=v3.1.8"
          Environment="ETCD_NAME=controller"
          Environment="ETCD_INITIAL_CLUSTER=controller=https://${COREOS_PRIVATE_IPV4}:2380"
          Environment="ETCD_INITIAL_ADVERTISE_PEER_URLS=https://${COREOS_PRIVATE_IPV4}:2380"
          Environment="ETCD_ADVERTISE_CLIENT_URLS=https://${COREOS_PRIVATE_IPV4}:2379"
          Environment="ETCD_LISTEN_CLIENT_URLS=https://0.0.0.0:2379"
          Environment="ETCD_LISTEN_PEER_URLS=https://0.0.0.0:2380"
          Environment="ETCD_SSL_DIR=/etc/etcd/tls"
          Environment="ETCD_TRUSTED_CA_FILE=/etc/ssl/certs/etcd/server-ca.crt"
          Environment="ETCD_CERT_FILE=/etc/ssl/certs/etcd/server.crt"
          Environment="ETCD_KEY_FILE=/etc/ssl/certs/etcd/server.key"
          Environment="ETCD_CLIENT_CERT_AUTH=true"
          Environment="ETCD_PEER_TRUSTED_CA_FILE=/etc/ssl/certs/etcd/peer-ca.crt"
          Environment="ETCD_PEER_CERT_FILE=/etc/ssl/certs/etcd/peer.crt"
          Environment="ETCD_PEER_KEY_FILE=/etc/ssl/certs/etcd/peer.key"
          EOF
              }
          }

          # Initialize a Master node
          function init_master_node() {
              systemctl daemon-reload
              systemctl stop update-engine; systemctl mask update-engine

              if [ "$SELF_HOST_ETCD" = true ] ; then
                  echo "WARNING: THIS IS NOT YET FULLY WORKING - merely here to make ongoing testing easier"
                  etcd_render_flags="--experimental-self-hosted-etcd"
              else
                  etcd_render_flags="--etcd-servers=https://${COREOS_PRIVATE_IPV4}:2379"
              fi

              if [ "$CALICO_NETWORK_POLICY" = true ]; then
                  echo "WARNING: THIS IS EXPERIMENTAL SUPPORT FOR NETWORK POLICY"
                  cnp_render_flags="--experimental-calico-network-policy"
              else
                  cnp_render_flags=""
              fi

              # Render cluster assets
              /home/core/bootkube render --asset-dir=/home/core/assets ${etcd_render_flags} ${cnp_render_flags} \
                --api-servers=https://${COREOS_PUBLIC_IPV4}:6443,https://${COREOS_PRIVATE_IPV4}:6443

              # Move the local kubeconfig into expected location
              chown -R core:core /home/core/assets
              mkdir -p /etc/kubernetes
              cp /home/core/assets/auth/kubeconfig /etc/kubernetes/
              cp /home/core/assets/tls/ca.crt /etc/kubernetes/ca.crt

              # Start etcd.
              if [ "$SELF_HOST_ETCD" = false ] ; then
                  configure_etcd
                  systemctl enable etcd-member; sudo systemctl start etcd-member
              fi

              # Set cloud provider
              sed -i "s/cloud-provider=/cloud-provider=$CLOUD_PROVIDER/" /etc/systemd/system/kubelet.service

              # Start the kubelet
              systemctl enable kubelet; sudo systemctl start kubelet

              # Start bootkube to launch a self-hosted cluster
              /home/core/bootkube start --asset-dir=/home/core/assets
          }

          [ -d "${CLUSTER_DIR}" ] && {
              echo "Error: CLUSTER_DIR=${CLUSTER_DIR} already exists"
              exit 1
          }

          wget -P /home/core https://github.com/kubernetes-incubator/bootkube/releases/download/v0.6.0/bootkube.tar.gz
          tar -xzvf /home/core/bootkube.tar.gz bin/linux/bootkube
          mv bin/linux/bootkube /home/core
          rm -rf bin
          chmod +x /home/core/bootkube
          init_master_node
      mode: 0700
networkd:
  units:
    - name: 00-eth0.network
      contents: |
        [Match]
        Name=eth0

        [Network]
        DHCP=no
        DNS= $(cat /etc/resolv.conf | awk '/^nameserver /{ print $0 }' | sed 's/nameserver //g' | tr '\n' ' ')
        Domains=members.linode.com
        IPv6PrivacyExtensions=false
        Gateway=${PUBLIC_IP%.*}.1
        Address=${PUBLIC_IP}/24
        Address=${PRIVATE_IP}/17
systemd:
  units:
    - name: kubelet.service
      enable: true
      contents: |
        [Service]
        Environment=KUBELET_IMAGE_URL=quay.io/coreos/hyperkube
        Environment=KUBELET_IMAGE_TAG=v1.7.1_coreos.0
        Environment="RKT_RUN_ARGS=\
        --uuid-file-save=/var/cache/kubelet-pod.uuid \
        --volume etc-resolv,kind=host,source=/etc/resolv.conf --mount volume=etc-resolv,target=/etc/resolv.conf \
        --volume opt-cni-bin,kind=host,source=/opt/cni/bin --mount volume=opt-cni-bin,target=/opt/cni/bin \
        --volume var-log,kind=host,source=/var/log --mount volume=var-log,target=/var/log"
        EnvironmentFile=/etc/environment
        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests
        ExecStartPre=/bin/mkdir -p /opt/cni/bin
        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d
        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets
        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests
        ExecStartPre=/bin/mkdir -p /var/lib/cni
        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid
        ExecStart=/usr/lib/coreos/kubelet-wrapper \
          --allow-privileged \
          --anonymous-auth=false \
          --client-ca-file=/etc/kubernetes/ca.crt \
          --cloud-provider= \
          --cluster_dns=10.3.0.10 \
          --cluster_domain=cluster.local \
          --cni-conf-dir=/etc/kubernetes/cni/net.d \
          --exit-on-lock-contention \
          --hostname-override=${COREOS_PUBLIC_IPV4} \
          --kubeconfig=/etc/kubernetes/kubeconfig \
          --lock-file=/var/run/lock/kubelet.lock \
          --minimum-container-ttl-duration=3m0s \
          --network-plugin=cni \
          --node-labels=node-role.kubernetes.io/master \
          --pod-manifest-path=/etc/kubernetes/manifests \
          --register-with-taints=node-role.kubernetes.io/master=:NoSchedule \
          --require-kubeconfig
        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid
        Restart=always
        RestartSec=5

        [Install]
        WantedBy=multi-user.target
#~/go/src/github.com/coreos/container-linux-config-transpiler/bin/ct --in-file manifests/ignition-config/container-linux-config.yaml | sed 's/%24%7BPRIVATE_IP%7D/${PRIVATE_IP}/g' | sed 's/%24%7BPUBLIC_IP%7D/${PUBLIC_IP}/g' | sed 's/\\\\\\n//g' | jq '.' | sed 's/\${COREOS_PUBLIC_IPV4}/\\${COREOS_PUBLIC_IPV4}/g' | sed 's/\\\\n/\\n/g' | pbcopy
